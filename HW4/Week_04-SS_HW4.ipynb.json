{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-527229cf042812ef",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## HW 4 - W18 Python for Data Science, UC Berkeley\n",
    "\n",
    "Write code in this Jupyter Notebook to solve each of the following problems. Each problem should have its solution in a separate cell. Please upload this **Notebook** with your solutions to your GitHub repository in your SUBMISSIONS/Week_04 folder before your next live session class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-1b44a7b98ed62731",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Objectives:\n",
    "\n",
    "- Demonstrate how to define classes\n",
    "- Design and implement class objects and class interactions\n",
    "- Understand how to call methods from both inside and outside of classes\n",
    "- Understand how to set internal attribute within a class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-cfac900eae3841cc",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## General Guidelines:\n",
    "\n",
    "- All calculations need to be done in the classes (that includes any formatting of the output)\n",
    "- Name your classes exactly as written in the problem statement\n",
    "- Do NOT make separate input() statements.  The classes will be passed the input as shown in the examples\n",
    "- The examples given are samples of how we will test/grade your code. Please ensure your classes output the same information\n",
    "- Answer format is graded - please match the examples\n",
    "- User / function inputs do need to be validated or checked. (For example, if the problem states input an integer we will check it by inputting an integer)\n",
    "- Comments in your code are strongly suggested but won't be graded\n",
    "- This homework is mostly auto-graded. The blank code blocks are the auto-grading scripts - please do not delete these!\n",
    "- Your code needs to be written in the #Your Code Here blocks or it wont be graded correctly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-783896db972e3f83",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Project Proposal\n",
    "\n",
    "**Reminder!** Please complete your project proposal, as discussed in class and outlined in the project_1 folder.  You may submit your 1-2 page proposal in a Google Doc or PDF.  Please store your proposal (or a link to it) in your repo under the project_1 folder.\n",
    "\n",
    "This is not graded"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-696344d235251439",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## 4-1 A Quick Reading\n",
    "\n",
    "Please read the following article and write a couple sentences of reaction. What is the most interesting part?\n",
    "\n",
    "<a href=\"http://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to\">Write code that is easy to delete, not easy to extend</a> \n",
    "\n",
    "This article is to explain an \"architectural\" perspective towards thinking about writing in large code bases. This might not really apply to the work that you are doing now but should provide some food for thought on upcoming projects. Think about the author's perspective and why he seems to have come to it. Please don't worry about knowing all the terminology or programs/systems that he refers to. We want you to extract what he's trying to say about writing code rather than the intricacies of the low-level systems that is referring to.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-ec8be46bbe5effd3",
     "locked": false,
     "points": 20,
     "schema_version": 1,
     "solution": true
    }
   },
   "source": [
    "Answer:\n",
    "\n",
    "    When I first read the title, I didn't quite understand what it meant, but I think I do now. Rarely is code produced with a \"one and done\" type of goal. Code is usually written as a solution or a means to finding something out. During my data engineering internship this year, I think I finally was able to realize the the magnitude of computing power costs, even for the simplest of tasks. More time running code = more money company spends, like-wise, more time people spend fixing/researching/building code = more money company spends.\n",
    "    \n",
    "    You may not always be the sole person maintaing that code base either, so it's important to create something that is not impossible to follow or uses unneccessary resources. Not to mention it's much more satisfying to be able to perform a task with way less code than having many superfluous lines. Building off of foundations that already exist is good and saves time, as long as you don't become too dependent on them. Use tools that will help you keep your code organized and flowable.\n",
    "    \n",
    "    The scale will change, new questions and issues will arise, and you must have the means to adapt to those changes and maintain efficiency.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-7804e7ebc0429dcc",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "--------------------------------------------------------------------------------------------------------------------------------\n",
    "# Please do the card deck exercise\n",
    "* For 25 bonus points each added to any deficient assignment, you can do Galton's box "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-03f9229475d9a257",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## 4-2 - Deck of Cards\n",
    "\n",
    "Please design two classes in this notebook as follows:\n",
    "\n",
    "1\\. Please create a class called **PlayingCard**. This class should have: <br>\n",
    "- An attribute, \"rank\" that takes a value of 2-10, J, Q, K, or A. <br>\n",
    "- An attribute, \"suit\" that takes a value of \"♠\" \"♥\" \"♦\" or \"♣\". (If you don't know how to make these characters you can cut and paste from this block)<br>  \n",
    "- An __init__ function \n",
    "\n",
    "2\\. Please create a class called **Deck**.  This class should have: <br>\n",
    "- An attribute, \"cards\", that holds a list of PlayingCard objects. <br>\n",
    "- An __init__ function that: \n",
    "\n",
    "    - By default stores a full deck of 52 playing card (with proper numbers and suits) in the \"cards\" list. Each cards will be  of the class PlayingCard above<br>\n",
    "    - Allows the user to specify a specific suit (of the 4 - \"♠\" \"♥\" \"♦\" or \"♣\").  In this case, the program should only populate the deck with the 13 cards of that suit.\n",
    "    - After the cards object is initialized, call the \"shuffle_deck()\" function (below).<br>\n",
    "    \n",
    "- A \"shuffle_deck()\" function that randomly changes the order of cards in the deck.<br>\n",
    "- A \"deal_card(card_count)\" function that removes the first X cards from the deck and returns them as a list.<br>\n",
    "    - Make sure this function gives an appropriate response when the deck is out of cards.\n",
    "    \n",
    "3\\. You might have to write ```__str__ or __repr__``` methods to display the cards correctly.\n",
    "\n",
    "\n",
    "Example:\n",
    "```\n",
    ">>> card1 = PlayingCard(\"A\", \"♠\")\n",
    ">>> print(card1)\n",
    "'A' of ♠\n",
    "\n",
    ">>> card2 = PlayingCard(15, \"♠\")\n",
    "Invalid rank!\n",
    "\n",
    ">>> card2 = PlayingCard(10, \"bunnies\")\n",
    "Invalid suit!\n",
    "\n",
    ">>> deck1 = Deck()\n",
    ">>> print(deck1.cards)\n",
    "['K' of ♠, 'A' of ♥, 6 of ♣, 7 of ♠, 'J' of ♦, 6 of ♠, 'Q' of ♦, 5 of ♣, 10 of ♦, 2 of ♥, 8 of ♣, 8 of ♦, 4 of ♦, 7 of ♦, 3 of ♣, 'K' of ♣, 9 of ♠, 4 of ♥, 10 of ♥, 10 of ♣, 'A' of ♠, 9 of ♥, 7 of ♥, 9 of ♣, 7 of ♣, 5 of ♠, 3 of ♦, 10 of ♠, 'Q' of ♥, 'J' of ♣, 5 of ♥, 'K' of ♥, 'K' of ♦, 2 of ♠, 8 of ♠, 'Q' of ♣, 3 of ♠, 6 of ♥, 6 of ♦, 'A' of ♣, 'A' of ♦, 3 of ♥, 'J' of ♠, 4 of ♣, 5 of ♦, 2 of ♦, 4 of ♠, 2 of ♣, 'Q' of ♠, 'J' of ♥, 8 of ♥, 9 of ♦] \n",
    "\n",
    ">>> deck2 = Deck('♠')\n",
    ">>> deck2.shuffle_deck()\n",
    ">>> print(deck2.cards)\n",
    "['A' of ♠, 10 of ♠, 3 of ♠, 7 of ♠, 5 of ♠, 4 of ♠, 8 of ♠, 'J' of ♠, 9 of ♠, 'Q' of ♠, 6 of ♠, 2 of ♠, 'K' of ♠]\n",
    "\n",
    ">>> deck2.deal_card(7)\n",
    "['A' of ♠, 10 of ♠, 3 of ♠, 7 of ♠, 5 of ♠, 4 of ♠, 8 of ♠]\n",
    "\n",
    ">>> deck2.deal_card(8)\n",
    "Cannot deal 7 cards. The deck only has 6 cards left!\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-1a340c9ca6b682a1",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN SOLUTION\n",
    "import random\n",
    "\n",
    "suits = [\"♠\", \"♥\", \"♣\", \"♦\"]\n",
    "\n",
    "class PlayingCard(object):\n",
    "\n",
    "\n",
    "    def __init__(self, rank, suit):\n",
    "        # initialize both attributes rank and suit\n",
    "        self.rank = rank\n",
    "        self.suit = suit\n",
    "        \n",
    "        if self.suit not in suits:\n",
    "            print (\"Invalid suit!\")\n",
    "            \n",
    "        if self.rank not in range(1,14):\n",
    "            print (\"Invalid rank!\")\n",
    "\n",
    "\n",
    "    # Format cards to return \"(rank) of (suit)\"\"\n",
    "        if self.rank == 1:\n",
    "            rank = \"Ace\"\n",
    "        elif self.rank == 11:\n",
    "            rank = \"Jack\"\n",
    "        elif self.rank == 12:\n",
    "            rank = \"Queen\"\n",
    "        elif self.rank == 13:\n",
    "            rank = \"King\"           \n",
    "        else:\n",
    "            rank = str(self.rank)\n",
    "            \n",
    "    \n",
    "    def __str__(self):\n",
    "        return \"{} of {}\".format(self.rank, self.suit)\n",
    "    def __repr__(self):\n",
    "        return \"{} of {}\".format(self.rank, self.suit)\n",
    "\n",
    "class Deck(object):\n",
    "    def __init__(self, suit = None):\n",
    "        # initializing attribute 'cards', empty list for deck, which will be added to\n",
    "        self.cards = []\n",
    "        \n",
    "        # create 52 cards\n",
    "        # suit has 4 possibilities, rank has 13 \n",
    "        for suit in [\"♠\", \"♥\", \"♣\", \"♦\"]:\n",
    "            for rank in range(1,14):\n",
    "                card = PlayingCard(rank, suit)\n",
    "                self.cards.append(card)\n",
    "\n",
    "        \n",
    "    def shuffle_deck(self):\n",
    "        # making sure to shuffle every single card, even though it may get replaced w/ itself        \n",
    "        for i in range(len(self.cards)):\n",
    "            j = random.randrange(i, len(self.cards))\n",
    "            self.cards[i], self.cards[j] = self.cards[j], self.cards[i]\n",
    "     \n",
    "    def deal_card(self, card_count):\n",
    "        for i in range(0, card_count):\n",
    "                if len(self.cards) == 0: \n",
    "                    #if the deck is empty              \n",
    "                    print(\"no more cards in deck\")\n",
    "                    print(len(self.cards))\n",
    "\n",
    "                elif card_count >= len(self.cards):\n",
    "                    print (\"Cannot deal {} cards. The deck only has {} left!\".format(card_count, len(self.cards)))\n",
    "                    break\n",
    "                else:\n",
    "                    self.cards.pop(card_count)\n",
    "\n",
    "\n",
    "        print(self.cards)\n",
    "\n",
    "\n",
    "            \n",
    "        \n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Invalid rank!\n",
      "16 of ♣\n",
      "Invalid suit!\n",
      "Invalid rank!\n"
     ]
    }
   ],
   "source": [
    "card1 = PlayingCard(16, \"♣\")\n",
    "print(card1)\n",
    "\n",
    "card1 = PlayingCard(16, \"bunnies\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 of ♠, 2 of ♠, 3 of ♠, 4 of ♠, 5 of ♠, 6 of ♠, 7 of ♠, 8 of ♠, 9 of ♠, 10 of ♠, 11 of ♠, 12 of ♠, 13 of ♠, 1 of ♥, 2 of ♥, 3 of ♥, 4 of ♥, 5 of ♥, 6 of ♥, 7 of ♥, 8 of ♥, 9 of ♥, 10 of ♥, 11 of ♥, 12 of ♥, 13 of ♥, 1 of ♣, 2 of ♣, 3 of ♣, 4 of ♣, 5 of ♣, 6 of ♣, 7 of ♣, 8 of ♣, 9 of ♣, 10 of ♣, 11 of ♣, 12 of ♣, 13 of ♣, 1 of ♦, 2 of ♦, 3 of ♦, 4 of ♦, 5 of ♦, 6 of ♦, 7 of ♦, 8 of ♦, 9 of ♦, 10 of ♦, 11 of ♦, 12 of ♦, 13 of ♦]\n"
     ]
    }
   ],
   "source": [
    "deck1 = Deck()\n",
    "print(deck1.cards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11 of ♠, 9 of ♥, 4 of ♠, 4 of ♥, 10 of ♥, 5 of ♦, 1 of ♦, 10 of ♣, 6 of ♥, 12 of ♠, 11 of ♦, 8 of ♥, 13 of ♣, 9 of ♣, 5 of ♣, 1 of ♠, 8 of ♣, 2 of ♦, 13 of ♦, 2 of ♥, 8 of ♦, 3 of ♥, 3 of ♠, 6 of ♣, 7 of ♠, 12 of ♥, 6 of ♦, 9 of ♠, 4 of ♣, 3 of ♦, 11 of ♥, 1 of ♥, 1 of ♣, 7 of ♥, 11 of ♣, 8 of ♠, 3 of ♣, 13 of ♠, 10 of ♦, 9 of ♦, 2 of ♣, 13 of ♥, 5 of ♠, 10 of ♠, 4 of ♦, 2 of ♠, 7 of ♣, 12 of ♣, 12 of ♦, 7 of ♦, 6 of ♠, 5 of ♥]\n"
     ]
    }
   ],
   "source": [
    "deck2 = Deck('♠')\n",
    "deck2.shuffle_deck()\n",
    "print(deck2.cards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11 of ♠, 9 of ♥, 4 of ♠, 4 of ♥, 10 of ♥, 5 of ♦, 1 of ♦, 10 of ♣, 6 of ♥, 12 of ♠, 8 of ♦, 3 of ♥, 3 of ♠, 6 of ♣, 7 of ♠, 12 of ♥, 6 of ♦, 9 of ♠, 4 of ♣, 3 of ♦, 11 of ♥, 1 of ♥, 1 of ♣, 7 of ♥, 11 of ♣, 8 of ♠, 3 of ♣, 13 of ♠, 10 of ♦, 9 of ♦, 2 of ♣, 13 of ♥, 5 of ♠, 10 of ♠, 4 of ♦, 2 of ♠, 7 of ♣, 12 of ♣, 12 of ♦, 7 of ♦, 6 of ♠, 5 of ♥]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "deck2.deal_card(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-2d3fb17759ce7be6",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "Extra Credit (2 points): Write a method called **war** that deals a card to the player and a card to the dealer from your deck.  Whomever has the highest ranked card wins - print them a nice message! (2 is the lowest rank and A is the highest).  If it is a tie - print a different message."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-f792b0aacbf4aeb1",
     "locked": false,
     "points": 2,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN SOLUTION\n",
    "# include previous classes\n",
    "#from PlayingCard import PlayingCard\n",
    "#from Deck import Deck\n",
    "import random\n",
    "\n",
    "suits = [\"♠\", \"♥\", \"♣\", \"♦\"]\n",
    "\n",
    "class PlayingCard(object):\n",
    "\n",
    "\n",
    "    def __init__(self, rank, suit):\n",
    "        # initialize both attributes rank and suit\n",
    "        self.rank = rank\n",
    "        self.suit = suit\n",
    "        \n",
    "        if self.suit not in suits:\n",
    "            print (\"Invalid suit!\")\n",
    "            \n",
    "        if self.rank not in range(1,14):\n",
    "            print (\"Invalid rank!\")\n",
    "\n",
    "\n",
    "    # Format cards to return \"(rank) of (suit)\"\"\n",
    "        if self.rank == 1:\n",
    "            rank = \"Ace\"\n",
    "        elif self.rank == 11:\n",
    "            rank = \"Jack\"\n",
    "        elif self.rank == 12:\n",
    "            rank = \"Queen\"\n",
    "        elif self.rank == 13:\n",
    "            rank = \"King\"           \n",
    "        else:\n",
    "            rank = str(self.rank)\n",
    "            \n",
    "    \n",
    "    def __str__(self):\n",
    "        return \"{} of {}\".format(self.rank, self.suit)\n",
    "    def __repr__(self):\n",
    "        return \"{} of {}\".format(self.rank, self.suit)\n",
    "\n",
    "class Deck(object):\n",
    "    def __init__(self, suit = None):\n",
    "        # initializing attribute 'cards', empty list for deck, which will be added to\n",
    "        self.cards = []\n",
    "        \n",
    "        # create 52 cards\n",
    "        # suit has 4 possibilities, rank has 13 \n",
    "        for suit in [\"♠\", \"♥\", \"♣\", \"♦\"]:\n",
    "            for rank in range(1,14):\n",
    "                card = PlayingCard(rank, suit)\n",
    "                self.cards.append(card)\n",
    "\n",
    "        \n",
    "    def shuffle_deck(self):\n",
    "        # making sure to shuffle every single card, even though it may get replaced w/ itself        \n",
    "        for i in range(len(self.cards)):\n",
    "            j = random.randrange(i, len(self.cards))\n",
    "            self.cards[i], self.cards[j] = self.cards[j], self.cards[i]\n",
    "     \n",
    "    def deal_card(self, card_count):\n",
    "        for i in range(0, card_count):\n",
    "                if len(self.cards) == 0: \n",
    "                    #if the deck is empty              \n",
    "                    print(\"no more cards in deck\")\n",
    "                    print(len(self.cards))\n",
    "\n",
    "                elif card_count >= len(self.cards):\n",
    "                    print (\"Cannot deal {} cards. The deck only has {} left!\".format(card_count, len(self.cards)))\n",
    "                    break\n",
    "                else:\n",
    "                    self.cards.pop(card_count)\n",
    "\n",
    "\n",
    "        print(self.cards)\n",
    "\n",
    "\n",
    "    def war (self):\n",
    "\n",
    "        while len(deck.cards) != 0:\n",
    "\n",
    "            card1 = deck.cards.pop()\n",
    "            card2 = deck.cards.pop()\n",
    "            print(\"Dealer: {}\").format(card1)\n",
    "            print(\"Player: {}\").format(card2)\n",
    "        \n",
    "            # check ranks of cards\n",
    "            if card1.rank > card2.rank: \n",
    "                print (\"Dealer wins!\")\n",
    "            elif card1.rank < card2.rank: \n",
    "                print (\"Player wins!\")\n",
    "            # if ranks are the same, declare a tie\n",
    "            elif card1.rank == card2.rank:\n",
    "                print (\"Tie game! Try again!\")\n",
    "            else:\n",
    "                pass\n",
    "        \n",
    "\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52\n"
     ]
    }
   ],
   "source": [
    "deck = Deck()\n",
    "deck.shuffle_deck()\n",
    "print(len(deck.cards))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dealer: 13 of ♣\n",
      "Player: 2 of ♣\n",
      "Dealer wins!\n",
      "Dealer: 5 of ♦\n",
      "Player: 1 of ♠\n",
      "Dealer wins!\n",
      "Dealer: 2 of ♦\n",
      "Player: 6 of ♣\n",
      "Player wins!\n",
      "Dealer: 12 of ♣\n",
      "Player: 3 of ♠\n",
      "Dealer wins!\n",
      "Dealer: 13 of ♠\n",
      "Player: 8 of ♦\n",
      "Dealer wins!\n",
      "Dealer: 7 of ♥\n",
      "Player: 9 of ♦\n",
      "Player wins!\n",
      "Dealer: 1 of ♥\n",
      "Player: 12 of ♠\n",
      "Player wins!\n",
      "Dealer: 4 of ♦\n",
      "Player: 12 of ♥\n",
      "Player wins!\n",
      "Dealer: 5 of ♠\n",
      "Player: 4 of ♣\n",
      "Dealer wins!\n",
      "Dealer: 1 of ♣\n",
      "Player: 3 of ♥\n",
      "Player wins!\n",
      "Dealer: 7 of ♠\n",
      "Player: 13 of ♦\n",
      "Player wins!\n",
      "Dealer: 5 of ♥\n",
      "Player: 8 of ♣\n",
      "Player wins!\n",
      "Dealer: 2 of ♥\n",
      "Player: 7 of ♦\n",
      "Player wins!\n",
      "Dealer: 4 of ♥\n",
      "Player: 8 of ♠\n",
      "Player wins!\n",
      "Dealer: 3 of ♣\n",
      "Player: 10 of ♥\n",
      "Player wins!\n",
      "Dealer: 6 of ♦\n",
      "Player: 12 of ♦\n",
      "Player wins!\n",
      "Dealer: 5 of ♣\n",
      "Player: 11 of ♣\n",
      "Player wins!\n",
      "Dealer: 3 of ♦\n",
      "Player: 6 of ♠\n",
      "Player wins!\n",
      "Dealer: 10 of ♠\n",
      "Player: 1 of ♦\n",
      "Dealer wins!\n",
      "Dealer: 9 of ♥\n",
      "Player: 7 of ♣\n",
      "Dealer wins!\n",
      "Dealer: 8 of ♥\n",
      "Player: 4 of ♠\n",
      "Dealer wins!\n",
      "Dealer: 10 of ♣\n",
      "Player: 13 of ♥\n",
      "Player wins!\n",
      "Dealer: 10 of ♦\n",
      "Player: 11 of ♦\n",
      "Player wins!\n",
      "Dealer: 9 of ♠\n",
      "Player: 11 of ♥\n",
      "Player wins!\n",
      "Dealer: 9 of ♣\n",
      "Player: 6 of ♥\n",
      "Dealer wins!\n",
      "Dealer: 2 of ♠\n",
      "Player: 11 of ♠\n",
      "Player wins!\n"
     ]
    }
   ],
   "source": [
    "deck.war()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-9fb0d10895402417",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Part 4-3 - Galton's Box (25 points extra credit)\n",
    "\n",
    "The following figure depicts Galton's box, a game in which marbles are dropped through N rows of pins.  In row 0, there is one position a marble can be in (labeled 0), in row 1, there are two positions (labeled 0 and 1), and so forth.  Each time the marble bounces from one row to the next, there is a 50% probability it bounces left and a 50% probability it bounces right.\n",
    "\n",
    "<img src=\"Galton_Box.png\">\n",
    "<img src=\"Galton2.jpg\">\n",
    "\n",
    "Notice that if a marble is in position x of row y, and it bounces left, it ends up in position x of row y+1.  If it bounces right, it ends up in position x+1.\n",
    "\n",
    "1\\. Create a class, **Marble**, to represent a single Marble that will drop through Galton's Box. \n",
    "- Include attributes to represent the position of the marble.  \n",
    "- The ```__init__``` method should accept a one-character label for use when printing the Marble.\n",
    "\n",
    "2\\. Create a class, **GaltonBox**, to represent the overall setup.  You should include the following methods:\n",
    "\n",
    "- ```__init__``` - Your initializer should accept the size of the box, N.\n",
    "- ```insert_marble``` - This method should accept a Marble instance and sets its position to position 0, row 0.\n",
    "- ```time_step``` - This method should cause all Marbles in Galton's box to bounce to the next row, dropping left or right with equal probability.  When a marble reaches row N-1 at the bottom of the box, it should not move any more.  Note that you should simply allow marbles to occupy the same position (instead of working out a system to prevent a Marble from entering a position if another Marble is already there).\n",
    "- ```__str__ and __repr__``` - Include methods to display the Marbles currently in the box.  To keep things simple, if there are multiple Marbles in a given position, you only have to display one of the labels.\n",
    "\n",
    "Your classes should mimic the following behavior (except that the horizontal positions are random):\n",
    "\n",
    "```\n",
    ">>> m1 = Marble(\"x\")\n",
    ">>> m2 = Marble(\"o\")\n",
    ">>> box = GaltonBox(3)\n",
    ">>> box.insert_marble(m1)\n",
    ">>> box\n",
    "x\n",
    "--\n",
    "---\n",
    ">>> box.time_step()\n",
    ">>> box\n",
    "-\n",
    "-x\n",
    "---\n",
    ">>> box.insert_marble(m2)\n",
    ">>> box\n",
    "o\n",
    "-x\n",
    "---\n",
    ">>> box.time_step()\n",
    ">>> box\n",
    "-\n",
    "o-\n",
    "-x-\n",
    ">>> box.time_step()\n",
    ">>> box\n",
    "-\n",
    "--\n",
    "ox-\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-8dc0d52c853e6e25",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-249-9db3f973654c>, line 28)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-249-9db3f973654c>\"\u001b[0;36m, line \u001b[0;32m28\u001b[0m\n\u001b[0;31m    def insert_marble(self, Marble()):\u001b[0m\n\u001b[0m                                  ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "### BEGIN SOLUTION\n",
    "import random\n",
    "\n",
    "class Marble(object):\n",
    "    \n",
    "    def __init__(self, char):\n",
    "        # initial position of marble\n",
    "        self.x = 0\n",
    "        self.y = 0\n",
    "        # marble character\n",
    "        self.char = char\n",
    "        \n",
    "class GaltonBox(object):\n",
    "    # N is dimension of square box\n",
    "    def __init__(self, N):\n",
    "        self.N = N\n",
    "        self.marble_list = []\n",
    "        self.row_count = [0] * (N + 1)\n",
    "\n",
    "    # to display the marble in the box\n",
    "    def __str__(self):\n",
    "        return \"{}\".format(self.char)\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return \"{}\".format(self.char)\n",
    "  \n",
    "    # accepts marble instance, sets position and row to 0\n",
    "    def insert_marble(self, Marble()):\n",
    "        self.x = 0\n",
    "        self.y = 0\n",
    "        self.row = 0\n",
    "        \n",
    "        if(len(self.marble_list) <= self.N):\n",
    "            self.marble_list.append()\n",
    "'''            \n",
    "    # where marbles fall with equal probability to next row, either from the left or right    \n",
    "    def time_step(self):\n",
    "\n",
    "\n",
    "        for marble in self.marble_list:\n",
    "            if marble.y < self.N:\n",
    "                # moving the marble either to left or right, moving down by 1\n",
    "                marble.x += random.int(0,1)\n",
    "                marble.y += 1\n",
    "                \n",
    "            elif marble.y < self.N + self.N - self.row_count[marble.x]:\n",
    "                marble.y += 1\n",
    "                \n",
    "            elif marble.y == self.N + self.N - self.row_count[marble.x]:\n",
    "                self.row_count[marble.x] += 1\n",
    "                \n",
    "            else:\n",
    "                pass\n",
    "            \n",
    "            num_marbles = len(self.marble_list) - sum(self.row_count)\n",
    "            print(num_marbles)\n",
    "\n",
    "\n",
    "            for y in range(self.N + 1):\n",
    "                ### add logic for printing marbles on board\n",
    "'''\n",
    "        \n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "m1 = Marble(\"x\")\n",
    "m2 = Marble(\"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "__init__() takes exactly 2 arguments (1 given)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-251-0d65e8a52b2a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mbox\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGaltonBox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mbox\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert_marble\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mm1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-239-ef3226243c41>\u001b[0m in \u001b[0;36minsert_marble\u001b[0;34m(self, marble)\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m         \u001b[0;32mif\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmarble_list\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmarble_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMarble\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m '''            \n\u001b[1;32m     37\u001b[0m     \u001b[0;31m# where marbles fall with equal probability to next row, either from the left or right\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: __init__() takes exactly 2 arguments (1 given)"
     ]
    }
   ],
   "source": [
    "box = GaltonBox(3)\n",
    "box.insert_marble(m1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-0d6fbf3d0326cbc4",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "**Bonus Investigation:** (Extra Credit: 2 points) Once your code is working, write a script to create a box with 20 rows, insert a few dozen Marbles, and repeatedly call time_step() until all Marbles are at the bottom.  Now adapt the following code to display a histogram of the final Marble positions.  What does the shape of the distribution look like?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-ff1d95ccd995a9d3",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1., 2., 3., 2., 0., 1.]),\n",
       " array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5]),\n",
       " <a list of 6 Patch objects>)"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sample code below - you will have to adjust it to work for your code.\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "x_positions = (2,3,4,6,7,4,3,2,3,1)\n",
    "cutoffs = np.arange(min(x_positions) - .5, max(x_positions)+.5)\n",
    "plt.hist(x_positions, bins = cutoffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-d4119824e9396a02",
     "locked": false,
     "points": 1,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN SOLUTION\n",
    "    \n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e86742ae1d24a577",
     "locked": false,
     "points": 1,
     "schema_version": 1,
     "solution": true
    }
   },
   "source": [
    "**Your response here**"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
